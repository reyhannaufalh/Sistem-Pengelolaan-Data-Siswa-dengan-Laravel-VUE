{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport repository from \"@/api/repository\";\nimport Paginate from \"vuejs-paginate-next\";\nexport default {\n  name: \"AdminView\",\n  components: {\n    paginate: Paginate\n  },\n  setup() {},\n  data() {\n    return {\n      posts: null,\n      error: null,\n      showModal: false,\n      user: {\n        id: null,\n        name: null,\n        email: null,\n        role: null\n      },\n      showModall: false,\n      fun: null,\n      arg: null,\n      i: 0,\n      page: 0,\n      pageRange: 10,\n      pageCount: 0\n    };\n  },\n  methods: {\n    clickCallback(pageNum) {\n      this.page = pageNum;\n    },\n    async editUser(id) {\n      await repository.getPost(id).then(response => {\n        this.user = response.data[0];\n        this.showModal = true;\n      });\n    },\n    async updateUser(id) {\n      await repository.setUpdate(id, this.user).then(async () => {\n        this.showModall = false;\n        await repository.getPosts().then(response => {\n          const originalArr = response.data;\n          const splittedArray = [\"\"];\n          while (originalArr.length > 0) {\n            splittedArray.push(originalArr.splice(0, this.pageRange));\n          }\n          this.pageCount = splittedArray.length - 1;\n          this.posts = splittedArray;\n        });\n      });\n    },\n    async deleteUser(id) {\n      await repository.setDelete(id).then(async () => {\n        this.showModall = false;\n        await repository.getPosts().then(response => {\n          const originalArr = response.data;\n          const splittedArray = [\"\"];\n          while (originalArr.length > 0) {\n            splittedArray.push(originalArr.splice(0, this.pageRange));\n          }\n          this.pageCount = splittedArray.length - 1;\n          this.posts = splittedArray;\n        });\n      });\n    },\n    async logout() {\n      this.loading = true;\n      try {\n        await this.$store.dispatch(\"logout\");\n        await this.$router.push({\n          name: \"login\"\n        });\n      } catch (error) {\n        this.error = error;\n      } finally {\n        this.loading = false;\n      }\n    },\n    SureorNot(callback, args, question) {\n      this.showModal = false;\n      this.showModall = true;\n      this.fun = callback;\n      this.arg = args;\n      this.question = question;\n    }\n  },\n  async mounted() {\n    try {\n      let {\n        data\n      } = await repository.getPosts();\n      const originalArr = data;\n      const splittedArray = [\"\"];\n      while (originalArr.length > 0) {\n        splittedArray.push(originalArr.splice(0, this.pageRange));\n      }\n      this.pageCount = splittedArray.length - 1;\n      this.page = 1;\n      this.posts = splittedArray;\n    } catch (error) {\n      this.error = error;\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["repository","Paginate","name","components","paginate","setup","data","posts","error","showModal","user","id","email","role","showModall","fun","arg","i","page","pageRange","pageCount","methods","clickCallback","pageNum","editUser","getPost","then","response","updateUser","setUpdate","getPosts","originalArr","splittedArray","length","push","splice","deleteUser","setDelete","logout","loading","$store","dispatch","$router","SureorNot","callback","args","question","mounted"],"sourceRoot":"","sources":["D:\\Laravel\\FE Fauzi\\frontend-uas-2022\\frontend\\src\\views\\posts\\EditView.vue"],"sourcesContent":["<template>\r\n  <h3>Edit User</h3>\r\n  <form @submit.prevent=\"updateUser\">\r\n    <input type=\"text\" placeholder=\"Nama\" v-model=\"user.name\" /><br />\r\n    <input type=\"text\" placeholder=\"Email\" v-model=\"user.email\" /><br />\r\n    <select v-model=\"user.role\">\r\n      <option value=\"admin\">Admin</option>\r\n      <option value=\"user\">User</option>\r\n    </select>\r\n    <button @click=\"SureorNot(updateUser, [user.id], 'apa kamu yakin ingin mengubah user ini?')\">Update</button>\r\n  </form>\r\n</template>\r\n\r\n<script>\r\nimport repository from \"@/api/repository\";\r\nimport Paginate from \"vuejs-paginate-next\";\r\n\r\nexport default {\r\n  name: \"AdminView\",\r\n  components: {\r\n    paginate: Paginate,\r\n  },\r\n  setup() {},\r\n  data() {\r\n    return {\r\n      posts: null,\r\n      error: null,\r\n      showModal: false,\r\n      user: {\r\n        id: null,\r\n        name: null,\r\n        email: null,\r\n        role: null,\r\n      },\r\n      showModall: false,\r\n      fun: null,\r\n      arg: null,\r\n      i: 0,\r\n      page: 0,\r\n      pageRange: 10,\r\n      pageCount: 0,\r\n    };\r\n  },\r\n  methods: {\r\n    clickCallback(pageNum) {\r\n      this.page = pageNum;\r\n    },\r\n    async editUser(id) {\r\n      await repository.getPost(id).then((response) => {\r\n        this.user = response.data[0];\r\n        this.showModal = true;\r\n      });\r\n    },\r\n    async updateUser(id) {\r\n      await repository.setUpdate(id, this.user).then(async () => {\r\n        this.showModall = false;\r\n        await repository.getPosts().then((response) => {\r\n          const originalArr = response.data;\r\n          const splittedArray = [\"\"];\r\n          while (originalArr.length > 0) {\r\n            splittedArray.push(originalArr.splice(0, this.pageRange));\r\n          }\r\n          this.pageCount = splittedArray.length - 1;\r\n          this.posts = splittedArray;\r\n        });\r\n      });\r\n    },\r\n    async deleteUser(id) {\r\n      await repository.setDelete(id).then(async () => {\r\n        this.showModall = false;\r\n        await repository.getPosts().then((response) => {\r\n          const originalArr = response.data;\r\n          const splittedArray = [\"\"];\r\n          while (originalArr.length > 0) {\r\n            splittedArray.push(originalArr.splice(0, this.pageRange));\r\n          }\r\n          this.pageCount = splittedArray.length - 1;\r\n          this.posts = splittedArray;\r\n        });\r\n      });\r\n    },\r\n    async logout() {\r\n      this.loading = true;\r\n\r\n      try {\r\n        await this.$store.dispatch(\"logout\");\r\n        await this.$router.push({ name: \"login\" });\r\n      } catch (error) {\r\n        this.error = error;\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n    SureorNot(callback, args, question) {\r\n      this.showModal = false;\r\n      this.showModall = true;\r\n      this.fun = callback;\r\n      this.arg = args;\r\n      this.question = question;\r\n    },\r\n  },\r\n\r\n  async mounted() {\r\n    try {\r\n      let { data } = await repository.getPosts();\r\n      const originalArr = data;\r\n      const splittedArray = [\"\"];\r\n      while (originalArr.length > 0) {\r\n        splittedArray.push(originalArr.splice(0, this.pageRange));\r\n      }\r\n      this.pageCount = splittedArray.length - 1;\r\n      this.page = 1;\r\n      this.posts = splittedArray;\r\n    } catch (error) {\r\n      this.error = error;\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.navbar {\r\n  padding: 0 16px;\r\n  color: white;\r\n  font-size: 24px;\r\n  font-weight: 600;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n#btn-logout {\r\n  background-color: red;\r\n  width: 100px;\r\n  font-size: 20px;\r\n  font-weight: 600px;\r\n}\r\n.table-users {\r\n  border: 1px solid white;\r\n  border-radius: 10px;\r\n  box-shadow: 3px 3px 0 rgba(0, 0, 0, 0.1);\r\n  max-width: calc(100% - 2em);\r\n  margin: 1em auto;\r\n  overflow: hidden;\r\n  width: 800px;\r\n}\r\ntable {\r\n  width: 100%;\r\n}\r\ntable td,\r\ntable th {\r\n  color: white;\r\n  padding: 10px;\r\n}\r\ntable td {\r\n  text-align: left;\r\n  vertical-align: middle;\r\n}\r\ntable th {\r\n  background-color: #1c1c1c;\r\n  font-weight: 300;\r\n  text-align: center;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}